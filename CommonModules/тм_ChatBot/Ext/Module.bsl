#Область VK_API
#Область Messages

Функция message_send(СтруктураПараметров,user_id = Неопределено, random_id = Неопределено, peer_id = Неопределено, message = Неопределено, group_id = Неопределено, keyboard = Неопределено,attachment = Неопределено) Экспорт
	
	method_param = Новый Массив;
	Если НЕ user_id = Неопределено Тогда
		method_param.Добавить("user_id=" + user_id);
	КонецЕсли; 
	Если НЕ random_id = Неопределено Тогда
		method_param.Добавить("random_id=" + random_id);
	КонецЕсли; 
	Если НЕ peer_id = Неопределено Тогда
		method_param.Добавить("peer_id=" + peer_id);
	КонецЕсли; 
	Если НЕ message = Неопределено Тогда
		method_param.Добавить("message=" + message);
	КонецЕсли; 
	Если НЕ group_id = Неопределено Тогда
		method_param.Добавить("group_id=" + group_id);
	КонецЕсли; 
	Если НЕ keyboard = Неопределено Тогда
		method_param.Добавить("keyboard=" + keyboard);
	КонецЕсли; 
	Если НЕ attachment = Неопределено Тогда
		method_param.Добавить("attachment=" + attachment);
	КонецЕсли; 
	
	Возврат ОтправитьЗапросVK(СтруктураПараметров, "messages.send", method_param);
КонецФункции


#КонецОбласти 
Функция СформироватьКлавиатуру(buttons) Экспорт
	
	keyboard = Новый Структура;
	keyboard.Вставить("one_time", false);
	keyboard.Вставить("buttons", buttons);
	
	keyboardJSON = тм_РаботаСJSON.СериализоватьВJSON(keyboard);
	
	Возврат keyboardJSON;
КонецФункции

Функция СформироватьКнопку(label = "Тест", payload_button, payload_level, color = "default", type = "text") Экспорт
	
	Структура_payload = Новый Структура;
	Структура_payload.Вставить("button", payload_button);
	Структура_payload.Вставить("level", payload_level);
	payload = тм_РаботаСJSON.СериализоватьВJSON(Структура_payload);
	
	action = Новый Структура;
	action.Вставить("type", type);
	action.Вставить("label", label);
	action.Вставить("payload", payload);
	
	button = Новый Структура;
	button.Вставить("action", action);
	button.Вставить("color", color);
	
	Возврат button;
КонецФункции



#Область Groups

// Функция - Groups get members
//
// Параметры:
//  group_id - строка - идентификатор или короткое имя сообщества
//  sort	 - строка - по умолчанию id_asc, сортировка, с которой необходимо вернуть список участников. Может принимать значения:
//	id_asc — в порядке возрастания id;
//	id_desc — в порядке убывания id;
//	time_asc — в хронологическом порядке по вступлению в сообщество;
//	time_desc — в антихронологическом порядке по вступлению в сообщество.
//	Сортировка по time_asc и time_desc возможна только при вызове от модератора сообщества. 
//  offset	 - число - смещение, необходимое для выборки определенного подмножества участников. По умолчанию 0
//  count	 - число - количество участников сообщества, информацию о которых необходимо получить
//	положительное число, по умолчанию 1000, максимальное значение 1000
//  fields	 - строка - список слов, разделенных через запятую, список дополнительных полей, которые необходимо вернуть. 
//	Доступные значения: sex, bdate, city, country, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, online_mobile, lists, domain, has_mobile, contacts, connections, site, education, universities, schools, can_post, can_see_all_posts, can_see_audio, can_write_private_message, status, last_seen, common_count, relation, relatives 
//  filter	 - строка - 
//	friends — будут возвращены только друзья в этом сообществе.
//	unsure — будут возвращены пользователи, которые выбрали «Возможно пойду» (если сообщество относится к мероприятиям).
//	managers — будут возвращены только руководители сообщества (доступно при запросе с передачей access_token от имени администратора сообщества).
// 
// Возвращаемое значение:
//   - 
//
Функция groups_getMembers(group_id = Неопределено, sort = Неопределено, offset = Неопределено, count = Неопределено, fields = Неопределено, filter = Неопределено) Экспорт
	
	method_param = Новый Массив;
	Если НЕ group_id = Неопределено Тогда
		method_param.Добавить("group_id=" + group_id);	
	КонецЕсли; 
	Если НЕ sort = Неопределено Тогда
		method_param.Добавить("sort=" + sort);	
	КонецЕсли; 
	Если НЕ offset = Неопределено Тогда
		method_param.Добавить("offset=" + ЧислоВСтроку(offset));	
	КонецЕсли; 
	Если НЕ count = Неопределено Тогда
		method_param.Добавить("count=" + ЧислоВСтроку(count));	
	КонецЕсли; 
	Если НЕ fields = Неопределено Тогда
		method_param.Добавить("fields=" + fields);	
	КонецЕсли; 
	Если НЕ filter = Неопределено Тогда
		method_param.Добавить("filter=" + filter);	
	КонецЕсли; 
	
	Возврат ОтправитьЗапросVK("", "groups.getMembers", method_param);
КонецФункции

#КонецОбласти 

#Область Интерфейс

Функция ОтправитьЗапросVK(СтруктураПараметров, method, method_param) Экспорт
	
	Результат = "";
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	СоединениеHTTP = Новый HTTPСоединение(СтруктураПараметров.API, 443,,,, 10,ssl, Ложь);
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("access_token", СтруктураПараметров.token);
	ПараметрыЗапроса.Вставить("method", method);
	ПараметрыЗапроса.Вставить("method_param", method_param);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = СформироватьМетодВК(ПараметрыЗапроса);
	
	РезультатЗапрос = СоединениеHTTP.Получить(HTTPЗапрос);
	
	Результат = тм_РаботаСJSON.ДесериализоватьИзJSON(РезультатЗапрос.ПолучитьТелоКакСтроку());
	
	Возврат Результат;
КонецФункции

Функция СформироватьМетодВК(ПараметрыЗапроса)
	Стр = "";
	ПараметрыМетода = "";
	
	Для каждого Строка Из ПараметрыЗапроса["method_param"] Цикл
		ПараметрыМетода = ПараметрыМетода + Строка + "&";
	КонецЦикла; 
	
	Стр = "method/" + ПараметрыЗапроса["method"] + "?";
	Стр = Стр + ПараметрыМетода;
	Стр = Стр + "access_token=" + ПараметрыЗапроса["access_token"] + "&v=5.103";
	
	Возврат Стр;
КонецФункции


#КонецОбласти 



#Область ВходящиеСообщения

Процедура ОбработатьСообщениеИзГруппыВК(СтруктураДанных, Ответ) Экспорт
	МессенджерВК = Перечисления.тм_Мессенджеры.VK;
	
	СтруктураПараметров = ПолучитьНастройки(МессенджерВК);
	
	Если СтруктураДанных.Свойство("secret") Тогда
		Если СтруктураДанных.secret = СтруктураПараметров.ДопПараметр Тогда
			ОбработатьВходящееСообщение(СтруктураДанных, Ответ, СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВходящееСообщение(СтруктураДанных, Ответ, СтруктураПараметров)
	
	Если СтруктураДанных.Свойство("type") И СтруктураДанных.type = "confirmation" Тогда
		Ответ.УстановитьТелоИзСтроки("498597eb", "UTF-8");
	ИначеЕсли СтруктураДанных.Свойство("type") И СтруктураДанных.type = "message_new" Тогда 
		Если СтруктураДанных.Свойство("object") Тогда
			Попытка
				ОбъектСообщение = СтруктураДанных.object;
				peer_id		= Формат(ОбъектСообщение.message.peer_id, "ЧРГ=''; ЧГ=0");
				random_id	= Формат(ОбъектСообщение.message.random_id, "ЧРГ=''; ЧГ=0");
				group_id	= Формат(СтруктураДанных.group_id, "ЧРГ=''; ЧГ=0");
				from_id		= Формат(ОбъектСообщение.message.from_id, "ЧРГ=''; ЧГ=0");
				
				Если ОбъектСообщение.message.Свойство("payload") И ЗначениеЗаполнено(ОбъектСообщение.message.payload) Тогда
					ВходящийPayload = тм_РаботаСJSON.ДесериализоватьИзJSON(ОбъектСообщение.message.payload);
					Данные = СформироватьКлавиатуру_A(ВходящийPayload.button, ВходящийPayload.level, from_id);
				Иначе
					Данные = СформироватьКлавиатуру_A();
				КонецЕсли; 
				Попытка
					attachment = Данные.attachment;
				Исключение
					attachment = Неопределено;
				КонецПопытки;
				Если ОбъектСообщение.message.Свойство("geo") Тогда
				КонецЕсли;
				message_send(СтруктураПараметров,,random_id, peer_id, Данные.message, group_id, Данные.keyboard,attachment);
				
			Исключение
				
			КонецПопытки; 
		КонецЕсли; 		
		
		Ответ.УстановитьТелоИзСтроки("ok", "UTF-8");
	КонецЕсли; 	
	
КонецПроцедуры

Функция СформироватьКлавиатуру_A(payload = "", level = 0, from_id = "")
	attachment = Неопределено;
	Если payload = "" Тогда
		buttons = СформироватьГлавноеМеню();
		message = "Привет это бот Томато Персонал. Выберите действие ниже.";
	Иначе	
		Если level = 1 Тогда
			Если payload = "zarplata" или payload = "grafik" Тогда
				buttons = СформироватьПериод(payload);
				message = "Выбрать период.";
			Иначе
				buttons = СформироватьГлавноеМеню();
				message = "Пришлите свою геолокацию";
				
			КонецЕсли; 
		ИначеЕсли level = 2 Тогда
			Если СтрНайти(payload,"zarplata")>0 или СтрНайти(payload,"grafik")>0 Тогда
				attachment = ОтправитьДокумент(payload, from_id);
				buttons = СформироватьГлавноеМеню();
			Иначе
				buttons = СформироватьГлавноеМеню();
				message = "Выберите действие ниже.";
			КонецЕсли;
		Иначе
			buttons = СформироватьГлавноеМеню();
			message = "Выберите действие ниже.";
		КонецЕсли; 	
	КонецЕсли; 
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("keyboard", СформироватьКлавиатуру(buttons));
	ДанныеВозврата.Вставить("message", message);
	
	Если attachment <> Неопределено тогда
		ДанныеВозврата.Вставить("attachment",attachment);
	КонецЕсли;
	
	Возврат ДанныеВозврата;
КонецФункции

#КонецОбласти

#Область Меню

Функция СформироватьЗарплату(from_id)
	buttons = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подписчики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Подписчики КАК Подписчики
	|ГДЕ
	|	Подписчики.member_id = &member_id";
	Запрос.УстановитьПараметр("member_id", from_id);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат buttons;
	КонецЕсли;  
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
	ТекущийОбъект.Подписался = Истина;
	ТекущийОбъект.Записать();
	
	Возврат buttons;
КонецФункции

Функция ОтправитьДокумент(payload, from_id)
	//Результат = "";
	//
	//МассивДанных = РазложитьСтрокуВМассивПодстрок(payload, "_");
	//
	//Отказ = Ложь;
	//Попытка
	//	ДокументТип = МассивДанных[0];	
	//	ДокументСсылка = МассивДанных[1];	
	//	
	//	Если НЕ ЗначениеЗаполнено(ДокументТип) ИЛИ
	//		НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
	//			Отказ = Истина;
	//	КонецЕсли; 
	//Исключение
	//    Отказ = Истина;
	//КонецПопытки; 
	//
	//Если Отказ Тогда
	//	Возврат Результат;	
	//КонецЕсли; 
	//
	//Если ДокументТип = "schetfactura" Тогда
	//	Результат = СформироватьСчетФактуруВPDF(ДокументСсылка, from_id);	
	//ИначеЕсли ДокументТип = "schet" Тогда
	//ИначеЕсли ДокументТип = "act" Тогда
	//КонецЕсли; 
	
	//Возврат Результат;
	type = "doc";
	id = "192379751";
	media = "540181141";
	Если СтрНайти(payload,"zarplata")>0 Тогда 		
		Структура = Новый Структура("type,owner_id,media_id",type,id,media);
		attachment = тм_РаботаСJSON.СериализоватьВJSON(Структура);
	ИначеЕсли СтрНайти(payload,"grafik")>0 Тогда
		Структура = Новый Структура("type,owner_id,media_id",type,id,media);
		attachment = тм_РаботаСJSON.СериализоватьВJSON(Структура);
		
	Иначе
		attachment = Неопределено;
	КонецЕсли;
	Возврат attachment;
	
КонецФункции

Функция СформироватьПериод(payload)
	buttons = Новый Массив;
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("Начало", "start", 0, "primary"));
	buttons.Добавить(РядКнопок);
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("01.02.2020-07.02.2020", payload + "_" + ЧислоВСтроку(12207220), 2));
	buttons.Добавить(РядКнопок);
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("08.02.2020-14.02.2020", payload + "_" + ЧислоВСтроку(122014220), 2));
	buttons.Добавить(РядКнопок);
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("15.02.2020-21.02.2020", payload + "_" + ЧислоВСтроку(1522021220), 2));
	buttons.Добавить(РядКнопок);
	
	Возврат buttons;
КонецФункции

Функция СформироватьМеню_Месяцы(payload)
	buttons = Новый Массив;
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("Начало", "start", 0, "primary"));
	buttons.Добавить(РядКнопок);
	
	buttons.Добавить(ДобавитьМесяцыВРяд(1, 2, payload));
	buttons.Добавить(ДобавитьМесяцыВРяд(3, 4, payload));
	buttons.Добавить(ДобавитьМесяцыВРяд(5, 6, payload));
	buttons.Добавить(ДобавитьМесяцыВРяд(7, 8, payload));
	buttons.Добавить(ДобавитьМесяцыВРяд(9, 10, payload));
	buttons.Добавить(ДобавитьМесяцыВРяд(11, 12, payload));
	
	Возврат buttons;
КонецФункции

Функция ДобавитьМесяцыВРяд(ПервыйМесяц, ПоследнийМесяц, payload)
	РядКнопок = Новый Массив;
	Для Счетчик = ПервыйМесяц По ПоследнийМесяц Цикл
		МесяцГода = ДобавитьМесяц(НачалоГода(ТекущаяДата()), Счетчик - 1);
		РядКнопок.Добавить(СформироватьКнопку(Формат(МесяцГода, "ДФ=MMMM"), payload + "_" + ЧислоВСтроку(Счетчик), 3));
	КонецЦикла; 
	Возврат РядКнопок;	
КонецФункции

Функция СформироватьМеню_Документы(payload, from_id)
	МассивДанных = РазложитьСтрокуВМассивПодстрок(payload, "_");
	
	Отказ = Ложь;
	Попытка
		ДокументТип = МассивДанных[0];	
		ДокументГод = МассивДанных[1];	
		ДокументМесяц = МассивДанных[2];	
		
		Если НЕ ЗначениеЗаполнено(ДокументТип) ИЛИ
			НЕ ЗначениеЗаполнено(ДокументГод) ИЛИ
			НЕ ЗначениеЗаполнено(ДокументМесяц) Тогда
			Отказ = Истина;
		КонецЕсли; 
	Исключение
		Отказ = Истина;
	КонецПопытки; 
	
	buttons = Новый Массив;
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("Начало", "start", 0, "primary"));
	buttons.Добавить(РядКнопок);
	
	Если Отказ = Истина Тогда
		Возврат buttons;
	КонецЕсли; 
	
	Если ДокументТип = "schetfactura" Тогда
		ВывестиДокументы_СчетФактура(buttons, ДокументГод, ДокументМесяц, from_id);	
	ИначеЕсли ДокументТип = "schet" Тогда
	ИначеЕсли ДокументТип = "act" Тогда
	КонецЕсли; 
	
	Возврат buttons;
КонецФункции

Функция СформироватьГлавноеМеню()
	buttons = Новый Массив;
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("Узнать•Зарплату", "zarplata", 1,"positive"));
	buttons.Добавить(РядКнопок);
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("Узнать•График", "grafik", 1,"positive"));
	buttons.Добавить(РядКнопок);
	
	РядКнопок = Новый Массив;
	РядКнопок.Добавить(СформироватьКнопку("Твоя•Геолокация", "geoloc", 1,"negative"));
	buttons.Добавить(РядКнопок);
	
	Возврат buttons;
КонецФункции

#КонецОбласти

#Область Документы

Процедура ВывестиДокументы_СчетФактура(Buttons, ДокументГод, ДокументМесяц, From_id)
	
	ДатаНачала = Дата(Число(ДокументГод), Число(ДокументМесяц), 01);
	ДатаОкончания = ДобавитьМесяц(ДатаНачала, 1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Комментарий ПОДОБНО &Комментарий";
	Запрос.УстановитьПараметр("Комментарий", From_id);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Контрагент = Выборка.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Номер КАК Номер,
	|	СчетФактураВыданный.Дата КАК Дата
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Дата >= &ДатаНачала
	|	И СчетФактураВыданный.Дата <= &ДатаОкончания
	|	И СчетФактураВыданный.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;  
	
	Выборка = РезультатЗапроса.Выбрать();
	Счетчик = 1;
	Пока Выборка.Следующий() Цикл
		РядКнопок = Новый Массив;
		РядКнопок.Добавить(СформироватьКнопку("Счет-фактура №" + Выборка.Номер + " от " + Формат(Выборка.Дата, "ДФ=yyyy-MM-dd"), "schetfactura" + "_" + XMLСтрока(Выборка.Ссылка), 4));
		Buttons.Добавить(РядКнопок);
		Счетчик = Счетчик + 1;
	КонецЦикла; 
	
КонецПроцедуры


#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ЧислоВСтроку(Число)
	Возврат Формат(Число, "ЧРГ=''; ЧГ=0");
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",",
	Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область TelegramAPI

// Функция - Get updates
//
// Параметры:
//  offset	 - 	 - 
//  limit	 - 	 - 
//  timeout	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция getUpdates(СтруктураНастроек,offset = 0, limit = 0, timeout = 0) Экспорт
	
	method_param = Новый Массив;
	Если offset > 0 Тогда
		method_param.Добавить("offset=" + ФорматироватьСтроку(offset));
	КонецЕсли; 
	Если limit > 0 Тогда
		method_param.Добавить("limit=" + ФорматироватьСтроку(limit));
	КонецЕсли; 
	Если timeout > 0 Тогда
		method_param.Добавить("timeout=" + ФорматироватьСтроку(timeout));
	КонецЕсли; 
	
	Результат = ОтправитьHTTPЗапрос(СтруктураНастроек,"getUpdates", method_param);
	
	Возврат тм_РаботаСJSON.ДесериализоватьИзJSON(Результат);
КонецФункции

Функция setWebhook(СтруктураНастроек,url = "", certificate = Неопределено) Экспорт
	
	method_param = Новый Массив;
	Если url <> "" Тогда
		method_param.Добавить("url=" + ФорматироватьСтроку(url));
	КонецЕсли; 
	
	Результат = ОтправитьHTTPЗапрос(СтруктураНастроек,"setWebhook", method_param);
	
	Возврат тм_РаботаСJSON.ДесериализоватьИзJSON(Результат);
КонецФункции
Функция getWebhookInfo(СтруктураНастроек) Экспорт
	method_param = Новый Массив;
	
	Результат = ОтправитьHTTPЗапрос(СтруктураНастроек,"getWebhookInfo", method_param);
	
	Возврат тм_РаботаСJSON.ДесериализоватьИзJSON(Результат);
КонецФункции


// Функция - Send message
//
// Параметры:
//  chat_id					 - 	 - 
//  text					 - 	 - 
//  parse_mode				 - 	 - 
//  disable_web_page_preview - 	 - 
//  disable_notification	 - 	 - 
//  reply_to_message_id		 - 	 - 
//  reply_markup			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция sendMessage(СтруктураНастроек,chat_id, text, parse_mode = Неопределено, disable_web_page_preview = Неопределено, disable_notification = Неопределено, reply_to_message_id = 0, reply_markup = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(chat_id) ИЛИ НЕ ЗначениеЗаполнено(text) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	method_param = Новый Массив;
	method_param.Добавить("chat_id=" + ФорматироватьСтроку(chat_id));
	method_param.Добавить("text=" + text);
	Если НЕ parse_mode = Неопределено Тогда
		method_param.Добавить("parse_mode=" + parse_mode);
	КонецЕсли; 
	Если НЕ disable_web_page_preview = Неопределено Тогда
		method_param.Добавить("disable_web_page_preview=" + disable_web_page_preview);
	КонецЕсли; 
	Если НЕ disable_notification = Неопределено Тогда
		method_param.Добавить("disable_notification=" + disable_notification);
	КонецЕсли; 
	Если reply_to_message_id > 0 Тогда
		method_param.Добавить("reply_to_message_id=" + ФорматироватьСтроку(reply_to_message_id));
	КонецЕсли; 
	Если НЕ reply_markup = Неопределено Тогда
		method_param.Добавить("reply_markup=" + reply_markup);
	КонецЕсли; 
	
	Результат = ОтправитьHTTPЗапрос(СтруктураНастроек,"sendMessage", method_param);
	
	Возврат Результат;
КонецФункции

Функция sendDocument(СтруктураНастроек,chat_id, file, caption = Неопределено, disable_notification = Неопределено, reply_to_message_id = 0, reply_markup = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(chat_id) Тогда
		Возврат Неопределено;
	КонецЕсли; 	
	
	ДвДанные = Base64Значение(file.data);
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	ПозицияПоследнегоСлеша = СтрНайти(ВременныйФайл,"\", НаправлениеПоиска.СКонца);
	АдресФайлаБезИмени = Лев(ВременныйФайл,ПозицияПоследнегоСлеша);
	ПолноеИмяФайла = АдресФайлаБезИмени + file.name;
    ДвДанные.Записать(ПолноеИмяФайла);
	
	//document = СтрЗаменить(document, "&#92;", "\"); //приводим символы в порядок
	
	//определяем имя файла
	//ДлинаИмени = СтрДлина(document) - СтрНайти(document, "\", НаправлениеПоиска.СКонца);
	//ИмяФайла = Прав(document, ДлинаИмени);

	
	method_param = Новый Массив;
	method_param.Добавить("chat_id=" + ФорматироватьСтроку(chat_id));
	
		
	Данные = Новый Соответствие;
	Данные.Вставить("Boundary", "----" + Строка(Новый УникальныйИдентификатор));
	Данные.Вставить("ИмяФайлаПолное", ПолноеИмяФайла);
	Данные.Вставить("ИмяФайла", file.name);
	Данные.Вставить("name", "document");
	
	Результат = ОтправитьHTTPЗапрос(СтруктураНастроек,"sendDocument", method_param, Данные);
	
	УдалитьФайлы(ПолноеИмяФайла);
	
	Возврат тм_РаботаСJSON.ДесериализоватьИзJSON(Результат);
КонецФункции


Функция sendPhoto(СтруктураНастроек,chat_id, photo, caption = Неопределено, disable_notification = Неопределено, reply_to_message_id = 0, reply_markup = Неопределено, ИмяФайлаПолное) Экспорт
	Если НЕ ЗначениеЗаполнено(chat_id) Тогда
		Возврат Неопределено;
	КонецЕсли; 	
	
	method_param = Новый Массив;
	method_param.Добавить("chat_id=" + ФорматироватьСтроку(chat_id));
	
	ДлинаИмени = СтрДлина(ИмяФайлаПолное) - СтрНайти(ИмяФайлаПолное, "\", НаправлениеПоиска.СКонца);
	ИмяФайла = Прав(ИмяФайлаПолное, ДлинаИмени);
	
	Данные = Новый Соответствие;
	Данные.Вставить("Boundary", "----" + Строка(Новый УникальныйИдентификатор));
	Данные.Вставить("ИмяФайлаПолное", ИмяФайлаПолное);
	Данные.Вставить("ИмяФайла", ИмяФайла);
	Данные.Вставить("name", "photo");
	
	Результат = ОтправитьHTTPЗапрос(СтруктураНастроек,"sendPhoto", method_param, Данные);
	
	Возврат тм_РаботаСJSON.ДесериализоватьИзJSON(Результат);
КонецФункции

Функция ОтправитьHTTPЗапрос(СтруктураНастроек,method, method_param = Неопределено, Данные = Неопределено) Экспорт
	Результат = Неопределено;
	
	Попытка
		
		СоединениеHTTP = Новый HTTPСоединение(СтруктураНастроек.api,443,,,,,Новый ЗащищенноеСоединениеOpenSSL());
		
		ПараметрыЗапроса = Новый Соответствие;
		ПараметрыЗапроса.Вставить("access_token", СтруктураНастроек.token);
		ПараметрыЗапроса.Вставить("method", method);
		ПараметрыЗапроса.Вставить("method_param", method_param);
		
		HTTPЗапрос = Новый HTTPЗапрос;
		Если Данные = Неопределено Тогда
			HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
		Иначе
			HTTPЗапрос.Заголовки.Вставить("Content-type", "multipart/form-data; boundary=" + Данные["Boundary"]);
			
			ТекстЗапроса = СформироватьТекстЗапроса(Данные);
			HTTPЗапрос.УстановитьТелоИзСтроки(ТекстЗапроса, КодировкаТекста.ANSI, ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли; 
		HTTPЗапрос.АдресРесурса = СформироватьМетодТелеграм(ПараметрыЗапроса);
		
		Если Данные = Неопределено Тогда
			РезультатЗапроса = СоединениеHTTP.Получить(HTTPЗапрос);
		Иначе	
			РезультатЗапроса = СоединениеHTTP.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли; 
		
		//Если РезультатЗапроса.КодСостояния = 200 Тогда
		//	//Результат = РезультатЗапроса.ПолучитьТелоКакСтроку();
		//Иначе
			//РС = РегистрыСведений.ОтладкаЗапросов.СоздатьМенеджерЗаписи();
			//РС.Дата = ТекущаяДата();
			//РС.json = Результат.ПолучитьТелоКакСтроку();
			//РС.УИД = Строка(Новый УникальныйИдентификатор);
			//РС.Источник = "Telegram";
			//
			//РС.Записать();
		//КонецЕсли; 
		
	Исключение     
		ОписаниеОшибки = ОписаниеОшибки();
		РС = РегистрыСведений.ОтладкаЗапросов.СоздатьМенеджерЗаписи();
		РС.Дата = ТекущаяДата();
		РС.json = ОписаниеОшибки;
		РС.УИД = Строка(Новый УникальныйИдентификатор);
		РС.Источник = "Telegram Исключение";
		
		РС.Записать();
	КонецПопытки; 
	
	Возврат Результат;
КонецФункции

Функция СформироватьМетодТелеграм(ПараметрыЗапроса)
	Стр = "";
	ПараметрыМетода = "";
	
	// Переделать формирование строки с методом и параметрами под конкретный API
	// данная реализация для ВКонтакте
	Если ЗначениеЗаполнено(ПараметрыЗапроса["method_param"]) Тогда
		Для каждого Строка Из ПараметрыЗапроса["method_param"] Цикл
			ПараметрыМетода = ПараметрыМетода + Строка + "&";
		КонецЦикла; 
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ПараметрыМетода) Тогда
		Стр = "bot" + ПараметрыЗапроса["access_token"] + "/" + ПараметрыЗапроса["method"] + "?";
		Стр = Стр + ПараметрыМетода;
	Иначе
		Стр = "bot" + ПараметрыЗапроса["access_token"] + "/" + ПараметрыЗапроса["method"];
	КонецЕсли; 
	
	Возврат Стр;
КонецФункции

Функция СформироватьТекстЗапроса(Данные)
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = ТекстЗапроса + "--" + Данные["Boundary"] + Символы.ВК + Символы.ПС;
	ТекстЗапроса = ТекстЗапроса + "Content-Disposition: form-data; name=""" + Данные["name"] + """; filename=""" + Данные["ИмяФайла"] + """" + Символы.ВК + Символы.ПС;
	ТекстЗапроса = ТекстЗапроса + "Content-Type: application/x-zip-compressed" + Символы.ВК + Символы.ПС + Символы.ВК + Символы.ПС; 
	
	ДвоичныеДанныеСтрокой = ПолучитьДвоичныеДанныеВСтрокуБезКодирования(Данные["ИмяФайлаПолное"]);
	
	ТекстЗапроса = ТекстЗапроса + ДвоичныеДанныеСтрокой + Символы.ВК + Символы.ПС;
	
	ТекстЗапроса = ТекстЗапроса + "--" + Данные["Boundary"] + "--" + Символы.ВК + Символы.ПС;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьДвоичныеДанныеВСтрокуБезКодирования(ИмяФайлаПолное)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайлаПолное, КодировкаТекста.ANSI, Символы.ПС);
	
	Возврат ТекстовыйДокумент.ПолучитьТекст();
КонецФункции

Функция ФорматироватьСтроку(ТекущееЗначение) Экспорт
	Возврат Формат(ТекущееЗначение, "ЧРГ=''; ЧГ=0");
КонецФункции

Функция ТаблицаСотрудниковПоКоду(КодСотрудника)
	 

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	СоответствиеАйдиКодСотрудника.id КАК id
	                |ИЗ
	                |	РегистрСведений.СоответствиеАйдиКодСотрудника КАК СоответствиеАйдиКодСотрудника
	                |ГДЕ
	                |	СоответствиеАйдиКодСотрудника.КодСотрудника = &КодСотрудника";
	Запрос.УстановитьПараметр("КодСотрудника", КодСотрудника); 
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

#Область Телеграм_методы

Процедура ОбработатьЗапросОтправкиПользователю(ТекстЗапроса)Экспорт
	ДанныеСтруктурой = тм_РаботаСJSON.ДесериализоватьИзJSON(ТекстЗапроса);
	DevBot = Ложь;
	Если ДанныеСтруктурой.Свойство("recipients") Тогда
		Если тм_ОбщиеФункции.ТипДня() <> "0" Тогда   //Если день считается не рабочий, то рассылку не делаем
			Возврат;	
		КонецЕсли; 
		DevBot = Истина;
		ПеременнаяЦикла = ДанныеСтруктурой.recipients;
	Иначе
		ПеременнаяЦикла = ТаблицаСотрудниковПоКоду(ДанныеСтруктурой.personId);
	КонецЕсли;
	
	СтруктураНастроек = ПолучитьНастройки(DevBot);
	
	Для Каждого стр из ПеременнаяЦикла Цикл
		ОтправитьСообщенияИДанныеПоЧатИД(стр.id, ДанныеСтруктурой, СтруктураНастроек);			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьСообщенияИДанныеПоЧатИД(chatid,ДанныеСтруктурой,СтруктураНастроек)
	
	Если ДанныеСтруктурой.Свойство("message") Тогда
		sendMessage(СтруктураНастроек, chatid, ДанныеСтруктурой.message, "HTML");
	КонецЕсли;
	Если ДанныеСтруктурой.Свойство("file") Тогда
		sendDocument(СтруктураНастроек, chatid, ДанныеСтруктурой.file);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьЗапросПользователя(ТекстЗапроса)Экспорт
	Перем ТекстВозврата, ЧатИД, КодСотрудникаПоИД, Клавиатура, КодУжеИспользован;
	КодУжеИспользован = Ложь;
	ТекстВозврата = "Добрый день! Напишите ваш персональный код.";
	
	СтруктураНастроек = ПолучитьНастройки(); 
	
	ДанныеСтруктурой = тм_РаботаСJSON.ДесериализоватьИзJSON(ТекстЗапроса);
	Клавиатура = Неопределено;
	Если ДанныеСтруктурой.Свойство("callback_query") Тогда
		ЧатИД = ДанныеСтруктурой.callback_query.message.chat.id;
		КодСотрудникаПоИД = КодСотрудникаПоИД(ДанныеСтруктурой.callback_query.message.chat.id);
		Если ЗначениеЗаполнено(КодСотрудникаПоИД) Тогда
			Если ДанныеСтруктурой.callback_query.data = "Расчет" Тогда
				Клавиатура = СформироватьМассивКомандКлавиатуры_inlineПериод();
				ТекстВозврата = "Выберите период: ";
			КонецЕсли;			
			Если ДанныеСтруктурой.callback_query.data = "Завчера" или ДанныеСтруктурой.callback_query.data = "Засегодня" Тогда
				ТекстВозврата = "Не удалось получить данные за период!"; 	//определяем дефолтный ответ
				СтруктураЗапрос = Новый Структура;
				СтруктураЗапрос.Вставить("id", КодСотрудникаПоИД);
				СтруктураЗапрос.Вставить("period", ДанныеСтруктурой.callback_query.data);	
				ОтветОтERP = ОтветНаЗапровВЕРП("/chatbot/waiterpay", СтруктураЗапрос);
				Если ОтветОтERP.КодСостояния = 200 Тогда
					ТекстИзЕРП = ОтветОтERP.ПолучитьТелоКакСтроку();
					Если ТекстИзЕРП <> "DENIED" Тогда
						ТекстВозврата = ТекстИзЕРП;
						Клавиатура = КлавиатураПослеАвторизации();
					КонецЕсли;
				КонецЕсли;					
			КонецЕсли;					
		КонецЕсли;
	Иначе
		Если ДанныеСтруктурой.Свойство("message") Тогда
			ЧатИД = ДанныеСтруктурой.message.chat.id;
			Если ДанныеСтруктурой.message.Свойство("from") Тогда
				Если ДанныеСтруктурой.message.from.Свойство("id") Тогда
					Если ДанныеСтруктурой.message.Свойство("text") Тогда
						Если ДанныеСтруктурой.message.text <> "/start" Тогда
							Если СтрДлина(СокрП(ДанныеСтруктурой.message.text)) = 6 Тогда
								РС = РегистрыСведений.КодыАвторизацииСотрудников.СоздатьНаборЗаписей();
								РС.Отбор.ОдноразовыйКод.Установить(ВРЕГ(СокрП(ДанныеСтруктурой.message.text)));
								РС.Прочитать();
								
								Если РС.Количество() <> 0 Тогда
									Для Каждого стрНабора из РС Цикл
										Если НЕ стрНабора.Использован Тогда
											КодСотрудника = стрНабора.КодСотрудника;
											ИмяСотрудника = стрНабора.ИмяСотрудника;
											стрНабора.Использован = ИСТИНА;
										Иначе
											КодУжеИспользован = ИСТИНА;
										КонецЕсли;
									КонецЦикла;
									Попытка
										РС.Записать()
									Исключение
									КонецПопытки;
									Если НЕ КодУжеИспользован Тогда
										УспехЗаписиВРС = ЗаписатьВРССоответствийПользователейТелеграммЕРП(ДанныеСтруктурой.message.from.id, КодСотрудника);
										
										Если УспехЗаписиВРС Тогда
											ТекстВозврата = "Добро пожаловать, " + ИмяСотрудника + " !";
											Клавиатура = КлавиатураПослеАвторизации();
										КонецЕсли;
										
									Иначе
										ТекстВозврата = "Код уже был использован, нажмите кнопку ""Обновить"" в Мобильном Курьере!";	
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							КодСотрудникаПоИД = КодСотрудникаПоИД(ДанныеСтруктурой.message.from.id);
							Если Не ЗначениеЗаполнено(КодСотрудникаПоИД) Тогда
								Если НЕ КодУжеИспользован Тогда	
									ТекстВозврата = "Некорректные данные для авторизации. Попробуйте еще раз";	//определяем дефолтный ответ
								КонецЕсли;
							Иначе
								Если Клавиатура = Неопределено И НЕ КодУжеИспользован Тогда
									ТекстВозврата = "Не удалось распознать запрос!";
									Клавиатура = КлавиатураПослеАвторизации();
								КонецЕсли;
								Если ДанныеСтруктурой.message.text = "Расчет" Тогда
									Клавиатура = СформироватьМассивКомандКлавиатуры_inlineПериод();
									ТекстВозврата = "Выберите период: ";
								КонецЕсли;												
							КонецЕсли;		
						Иначе
							Если Не ЗначениеЗаполнено(КодСотрудникаПоИД) Тогда
								ТекстВозврата = "Привет! Для того что бы начать, нужно указать данные для авторизации из Мобильного Курьера.";
							Иначе
								ТекстВозврата = "Вы уже авторизованы, для того что бы поменять укажите ваш код из Мобильного Курьера";
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли ДанныеСтруктурой.message.Свойство("sticker") Тогда
						ТекстВозврата = "Классный стикер! %F0%9F%8D%85";
					ИначеЕсли ДанныеСтруктурой.message.Свойство("audio") Тогда
						ТекстВозврата = "Извини, я не слушаю музыку от незнакомых людей. %F0%9F%98%89";	
					ИначеЕсли ДанныеСтруктурой.message.Свойство("video_note") Тогда
						ТекстВозврата = "Видеоголосовуха... Умно, но я их тоже ненавижу... Пиши пожалуйста текстом.";	
					ИначеЕсли ДанныеСтруктурой.message.Свойство("document") Тогда
						ТекстВозврата = "Я не открываю подозрительные документы и тебе не советую. %F0%9F%98%89";
					ИначеЕсли ДанныеСтруктурой.message.Свойство("photo") Тогда
						ТекстВозврата = "Отличная пикча! %F0%9F%8D%85";
					ИначеЕсли ДанныеСтруктурой.message.Свойство("voice") Тогда
						ТекстВозврата = "Ненавижу голосовухи... Пиши пожалуйста текстом.";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтветОтТелеги = sendMessage(СтруктураНастроек, ЧатИД, ТекстВозврата,"HTML",,,,Клавиатура); 
	
КонецПроцедуры

Функция ОтветНаЗапровВЕРП(Метод, Структура)
	ssl = Новый ЗащищенноеСоединениеOpenSSL(Неопределено ,Неопределено); 		
	//СоединениеОтвет = Новый HTTPСоединение("", 543,"","",, 300, ssl);	
	//ЗапросОтвет = Новый HTTPЗапрос(""+Метод);
	СоединениеОтвет = Новый HTTPСоединение("", 44300,,,, 300, ssl);	
	ЗапросОтвет = Новый HTTPЗапрос(""+Метод);
	
	ЗапросОтвет.Заголовки.Вставить("token", "");
	ДанныеВЗапрос = тм_РаботаСJSON.СериализоватьВJSON(Структура);
	ЗапросОтвет.УстановитьТелоИзСтроки(ДанныеВЗапрос);
	Возврат СоединениеОтвет.ОтправитьДляОбработки(ЗапросОтвет);
КонецФункции


Процедура ОтправитьСообщениеПользователю(id_Чата,СтруктураПараметров,Сообщение, Успешно = Неопределено, ПутьФайла = Неопределено, Кнопки = Неопределено) Экспорт
	
	
	Если ЗначениеЗаполнено(ПутьФайла) Тогда
		//ДанныеДокумента = sendDocument(СтруктураПараметров,id_Чата,,,,,,ПутьФайла);
		//ОтправитьФайл(id_Чата, СтруктураПараметров.token, СтруктураПараметров.api, ПутьФайла);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сообщение)  Тогда
		
		Данные = sendMessage(СтруктураПараметров,id_Чата,Сообщение,,,,,Кнопки);
		//ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
		//ИнтернетПрокси.Установить("https",СтруктураПараметров.vpnadress,СтруктураПараметров.vpnport, "", "", Ложь);
		////ИнтернетПрокси.Установить("https","54.37.130.2",3128, "", "", Ложь);
		//
		//Ресурс = "bot" + Токен + "/sendMessage?chat_id=" + СтрЗаменить(Формат(id_Чата, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text=" + Сообщение+ ?(Кнопки<>Неопределено, "&reply_markup="+Кнопки ,"");
		//ЗС = Новый ЗащищенноеСоединениеOpenSSL();
		//
		//Соединение  =  Новый HTTPСоединение(Сервер,443,,,ИнтернетПрокси,,ЗС);
		//Запрос = Новый HTTPЗапрос(Ресурс);
		//
		//Попытка
		//	Ответ = Соединение.Получить(Запрос);
		//Исключение
		//	Успешно = ОписаниеОшибки();
		//	Возврат;
		//КонецПопытки;
		//
		//Успешно = Ответ.КодСостояния = 200;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьМассивКомандКлавиатуры_inlineПериод()Экспорт
	
	МассивКнопок = Новый Массив;
	МассивКнопок.Добавить("За вчера");
	МассивКнопок.Добавить("За сегодня");
	Кнопки = Новый Массив;
	Для каждого Кнопка ИЗ МассивКнопок Цикл
		Кнопки.Добавить(Новый Структура("text, callback_data", кнопка, СтрЗаменить(Кнопка, " ", "")));
	КонецЦикла;
	Строки = Новый Массив;
	Строки.Добавить(Кнопки);
	КнопкиJs = тм_РаботаСJSON.СериализоватьВJSON(Новый Структура("inline_keyboard,resize_keyboard", Строки, Истина));
	Возврат КнопкиJs;
	
	
КонецФункции

Процедура ОбработатьКомандуinline(ПакетСообщения, Подписчик,СтруктураПараметров)
	
	Отказ = ложь;
	
	Если ПакетСообщения.data = "График" Тогда
		ПутьКФайлу = "E:\grafik.jpg";		
		ТекстСообщения = "Ваша график на неделю";
	ИначеЕсли ПакетСообщения.data = "Возможности" Тогда
		ПутьКФайлу = "E:\grafik.jpg";
		ТекстСообщения = "Укажите вашу возможность работать пример текста (20.02 с 10 до 22)";
	ИначеЕсли ПакетСообщения.data = "Зарплата" Тогда
		ПутьКФайлу = "E:\zp.pdf";
		ТекстСообщения = "Ваш расчетный лист за предыдущий месяц.";
	Иначе
		Отказ = истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ОтправитьСообщениеПользователю(Подписчик,СтруктураПараметров,ТекстСообщения,, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьФайл(id_Чата, Токен, Сервер, ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	ИмяОтправляемогоФайла = Файл.Имя;	
	
	СтрокаСоединения = "/bot" + Токен + "/sendDocument";
	
	Boundary = "----"+Строка(Новый УникальныйИдентификатор());
	
	//Определяем массив для процедуры ОбъединитьФайлы
	МассивФайловДляОбъединения = Новый Массив;
	
	//Формируем начальный фрагмент файла POST-запроса
	ИмяФайлаОтправкиНачало = ПолучитьИмяВременногоФайла("txt");
	ФайлОтправкиНачало = Новый ЗаписьТекста(ИмяФайлаОтправкиНачало, КодировкаТекста.UTF8);
	
	//Формируем конечный фрагмент файла POST-запроса
	ИмяФайлаОтправкиКонец = ПолучитьИмяВременногоФайла("txt");
	ФайлаОтправкиКонец = Новый ЗаписьТекста(ИмяФайлаОтправкиКонец, КодировкаТекста.UTF8);
	
	ТекстДляОтправки = "";
	
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""chat_id""" + Символы.ПС + Символы.ПС;
	ТекстДляОтправки = ТекстДляОтправки + id_Чата + Символы.ПС;
	
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary + Символы.ПС;
	ТекстДляОтправки = ТекстДляОтправки + "Content-Disposition: form-data; name=""document""; filename="""+ИмяОтправляемогоФайла+"""" + Символы.ПС;
	
	ФайлОтправкиНачало.ЗаписатьСтроку(ТекстДляОтправки );
	ФайлОтправкиНачало.Закрыть();
	
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиНачало);
	
	МассивФайловДляОбъединения.Добавить(СокрЛП(ПутьКФайлу));
	
	ТекстДляОтправки = "" + Символы.ПС;
	ТекстДляОтправки = ТекстДляОтправки + "--"+Boundary+"--";
	ФайлаОтправкиКонец.ЗаписатьСтроку(ТекстДляОтправки);
	ФайлаОтправкиКонец.Закрыть();
	МассивФайловДляОбъединения.Добавить(ИмяФайлаОтправкиКонец);
	
	ИмяФайлаОтправки = ПолучитьИмяВременногоФайла("txt");
	ОбъединитьФайлы(МассивФайловДляОбъединения, ИмяФайлаОтправки);
	
	HTTPЗапрос = Новый HTTPЗапрос;
	Заголовки = Новый Соответствие;
	
	HTTPЗапрос.Заголовки.Вставить("Connection", "keep-alive");
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+Boundary);
	
	HTTPЗапрос.УстановитьИмяФайлаТела(ИмяФайлаОтправки);
	HTTPЗапрос.АдресРесурса = СтрокаСоединения;
	
	ЗС = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
	ИнтернетПрокси = Новый ИнтернетПрокси(Ложь);
	ИнтернетПрокси.Установить("https","54.37.130.2",3128, "", "", Ложь);
	HTTPСоединение = Новый HTTPСоединение(Сервер,,,,ИнтернетПрокси,, ЗС);
	
	Попытка
		ОтветHTTP = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

Функция КлавиатураПослеАвторизации()Экспорт
	
	МассивКнопок = Новый Массив;
	МассивКнопок.Добавить("Расчет");
	Кнопки = Новый Массив;
	Для каждого Кнопка ИЗ МассивКнопок Цикл
		Кнопки.Добавить(Новый Структура("text, callback_data", кнопка, СтрЗаменить(Кнопка, " ", "")));
	КонецЦикла;
	Строки = Новый Массив;
	Строки.Добавить(Кнопки);
	
	КнопкиJs = тм_РаботаСJSON.СериализоватьВJSON(Новый Структура("keyboard,resize_keyboard",Строки, Истина));
	
	Возврат КнопкиJs;
	
	
КонецФункции



#КонецОбласти 

#Область Новая
Процедура ЗаписьВРСКода(СтруктураПараметров, ОдноразовыйКод)
	РС = РегистрыСведений.КодыАвторизацииСотрудников.СоздатьНаборЗаписей();
	РС.Отбор.КодСотрудника.Установить(СтруктураПараметров.personID);
	РС.Прочитать();
	Если РС.Количество() > 0 Тогда 
		Для Каждого ЗаписьРС из РС Цикл
			ЗаписьРС.КодСотрудника = СтруктураПараметров.personID;
			ЗаписьРС.ИмяСотрудника = СтруктураПараметров.personName;
			ЗаписьРС.ОдноразовыйКод = ОдноразовыйКод;
			ЗаписьРС.Использован = ЛОЖЬ;
		КонецЦикла;
	Иначе 
		РС = РегистрыСведений.КодыАвторизацииСотрудников.СоздатьМенеджерЗаписи();
		РС.КодСотрудника = СтруктураПараметров.personID;
		РС.ИмяСотрудника = СтруктураПараметров.personName;
		РС.ОдноразовыйКод = ОдноразовыйКод;
		РС.Использован = ЛОЖЬ;
	КонецЕсли;
	Попытка
		РС.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ОдноразовыйКодАвторизации(СтруктураПараметров)Экспорт
	ОдноразовыйКод = ВРег(ЛЕВ(Строка(Новый УникальныйИдентификатор),6));
	ЗаписьВРСКода(СтруктураПараметров, ОдноразовыйКод);
	
	Возврат ОдноразовыйКод;	
КонецФункции

//Получим настройки подключения
Функция ПолучитьНастройки(Разработка = Ложь) Экспорт
	
	Если НЕ Разработка Тогда
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("token","");
		СтруктураНастроек.Вставить("ДопПараметр","");
		СтруктураНастроек.Вставить("API","api.telegram.org");
		СтруктураНастроек.Вставить("ИмяБота","Боевой");	
	Иначе	
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("token","");
		СтруктураНастроек.Вставить("ДопПараметр","");
		СтруктураНастроек.Вставить("API","api.telegram.org");
		СтруктураНастроек.Вставить("ИмяБота","Разработка");	
	КонецЕсли;
	
		
	Возврат СтруктураНастроек;
КонецФункции // ПолучитьПараметры()


Функция ЗаписатьВРССоответствийПользователейТелеграммЕРП(ИДТелеграм,ИДЕРП)
	РС = РегистрыСведений.СоответствиеАйдиКодСотрудника.СоздатьМенеджерЗаписи();
	РС.id = ИДТелеграм;
	РС.КодСотрудника = ИДЕРП;
	Попытка
		РС.Записать();
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция КодСотрудникаПоИД(ID)Экспорт
	КодСотрудникаПоИД = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоответствиеАйдиКодСотрудника.КодСотрудника КАК КодСотрудника
	|ИЗ
	|	РегистрСведений.СоответствиеАйдиКодСотрудника КАК СоответствиеАйдиКодСотрудника
	|ГДЕ
	|	СоответствиеАйдиКодСотрудника.id = &id";
	Запрос.УстановитьПараметр("id", ID);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодСотрудникаПоИД = Выборка.КодСотрудника;
	КонецЦикла;
	
	Возврат КодСотрудникаПоИД;
	
КонецФункции



#КонецОбласти 


#КонецОбласти 







